2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
-Code:
	--CodeStart
	Select count(DISTINCT id) --here used the primary key for the calculation i.e. "ID"
	From business
	--CodeEnd

ii. Hours = 1562
-Code:
	--CodeStart
	Select count(DISTINCT business_id) --here used the foreign key for the calculation i.e. "business_ID"
	From hours
	--CodeEnd

iii. Category = 2643
-Code:
	--CodeStart
	Select count(DISTINCT business_id) --here used the foreign key for the calculation i.e. "business_ID"
	From category
	--CodeEnd

iv. Attribute = 1115
-Code:
	--CodeStart
	Select count(DISTINCT business_id) --here used the foreign key for the calculation i.e. "business_ID"
	From attribute
	--CodeEnd

v. Review = 10000
-Code:
	--CodeStart
	Select count(DISTINCT id) 

	--here used the primary key for the calculation i.e. "ID", there are also two foreign keys in this table i.e "business_id" & "user_id"
	
	From review
	--CodeEnd

vi. Checkin = 493
-Code:
	--CodeStart
	Select count(DISTINCT business_id) --here used the foreign key for the calculation i.e. "business_ID"
	From checkin
	--CodeEnd

vii. Photo = 10000
-Code:
	--CodeStart
	Select count(DISTINCT id) 

	--here used the primary key for the calculation i.e. "ID", there is also one foreign keys in this table i.e "business_ID"
	
	From photo
	--CodeEng

viii. Tip = 537
-Code:
	--CodeStart
	Select count(DISTINCT user_id) 

	--here used the foreign key for the calculation i.e. "User_ID", but there is also one more foreign keys in this table i.e "business_ID"
	
	From tip
	--CodeEng

ix. User = 10000
-Code
	--CodeStart
	Select count(DISTINCT id) --here used the primary key for the calculation i.e. "ID"
	From user
	--CodeEnd

x. Friend = 11
-Code:
	--CodeStart
	Select count(DISTINCT user_id) --here used the foreign key for the calculation i.e. "user_ID"
	From friend
	--CodeEnd

xi. Elite_years = 2780
-Code:
	--CodeStart
	Select count(DISTINCT user_id) --here used the foreign key for the calculation i.e. "user_ID"
	From elite_years
	--CodeEnd


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no."
	
	
	SQL code used to arrive at answer:
	--CodeStart
	SELECT *
	FROM User

	WHERE (id is NULL OR Name is NUll OR review_count is NULL OR yelping_Since is NULL OR useful is NULL OR Funny is NULL OR cool is NULL OR fans is NULL OR average_stars is NULL OR compliment_hot is NULL or compliment_more is NULL or compliment_profile is NULL or compliment_cute is NULL or compliment_list is NULL Or compliment_note is NULL or compliment_plain is NULL or compliment_cool is NULL or compliment_funny is NULL or compliment_writer is NULL or compliment_photos is NULL)
	
	--applied where condition on all the columns to check if there is any NULL and recieved "zero" records

	--CodeEng

	
	

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082

		--CodeStart
			Select avg(stars)
			,min(stars)
			,max(stars)
			from review
		--CodeEng
		
	
	ii. Table: Business, Column: Stars
	
		min:1			max:5.0		avg:3.6549

			--CodeStart
			Select avg(stars)
			,min(stars)
			,max(stars)
			from business
		--CodeEng
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg: 0.0144

		--CodeStart
		Select avg(likes)
		,min(likes)
		,max(likes)
		from tip
		--CodeEnd
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414

		--CodeStart
		Select avg(count)
		,min(count)
		,max(count)
		from checkin
		--CodeEnd
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995

		--CodeStart
		Select avg(review_count)
		,min(review_count)
		,max(review_count)
		from user
		--CodeEnd
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	--CodeStart

	Select b.city
	,Count(r.stars) as TotalOrders
	From business b INNER JOIN review r on b.id = r.business_id --applying inner join to match the id of city with id of review
	GROUP BY b.city --this is for grouping the cities together for clarity
	ORDER BY TotalOrders DESC; --as asked in question to put answers in descending order
`
	--CodeEnd
	
	
	Copy and Paste the Result Below:

			+-----------------+-------------+
			| city            | TotalOrders |
			+-----------------+-------------+
			| Las Vegas       |         193 |
			| Phoenix         |          65 |
			| Toronto         |          51 |
			| Scottsdale      |          37 |
			| Henderson       |          30 |
			| Tempe           |          28 |
			| Pittsburgh      |          23 |
			| Chandler        |          22 |
			| Charlotte       |          21 |
			| MontrÃ©al        |          18 |
			| Madison         |          16 |
			| Gilbert         |          13 |
			| Mesa            |          13 |
			| Cleveland       |          12 |
			| North Las Vegas |           6 |
			| Edinburgh       |           5 |
			| Glendale        |           5 |
			| Lakewood        |           5 |
			| Cave Creek      |           4 |
			| Champaign       |           4 |
			| Markham         |           4 |
			| North York      |           4 |
			| Mississauga     |           3 |
			| Surprise        |           3 |
			| Avondale        |           2 |
			+-----------------+-------------+
			(Output limit exceeded, 25 of 67 total rows shown)
	

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
-Code:
	--StartofCode
	SELECT city
	,name
	,stars --Reason of showing name was to properly lay out the distribution of various different business with their star rating
	from Business 
	where city = 'Avon';
	--EndofCode

Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):

+------+-----------------------------------------------+-------+
| city | name                                          | stars |
+------+-----------------------------------------------+-------+
| Avon | Helen & Kal's                                 |   2.5 |
| Avon | Marc's                                        |   4.0 |
| Avon | Hoban Pest Control                            |   5.0 |
| Avon | Light Salon & Spa                             |   3.5 |
| Avon | Portrait Innovations                          |   1.5 |
| Avon | Winking Lizard Tavern                         |   3.5 |
| Avon | Dervish Mediterranean & Turkish Grill         |   4.5 |
| Avon | Mulligans Pub and Grill                       |   3.5 |
| Avon | Mr. Handyman of Cleveland's Northwest Suburbs |   2.5 |
| Avon | Cambria hotel & suites Avon - Cleveland       |   4.0 |
+------+-----------------------------------------------+-------+


ii. Beachwood

SQL code used to arrive at answer:

-Code:
	--StartofCode
	SELECT city
	,name      --Reason of showing name was to properly lay out the distribution of various different business with their star rating
	,stars 
	from Business
	where city = 'Beachwood';
	--EndofCode

Copy and Paste the Resulting Table Below (2 columns Ã¢â‚¬â€œ star rating and count):
		
+-----------+---------------------------------+-------+
| city      | name                            | stars |
+-----------+---------------------------------+-------+
| Beachwood | Maltz Museum of Jewish Heritage |   3.0 |
| Beachwood | Charley's Grilled Subs          |   3.0 |
| Beachwood | Sixth & Pine                    |   4.5 |
| Beachwood | Beechmont Country Club          |   5.0 |
| Beachwood | Hyde Park Prime Steakhouse      |   4.0 |
| Beachwood | Origins                         |   4.5 |
| Beachwood | Fyodor Bridal Atelier           |   5.0 |
| Beachwood | College Planning Network        |   2.0 |
| Beachwood | Lucky Brand Jeans               |   3.5 |
| Beachwood | American Eagle Outfitters       |   3.5 |
| Beachwood | Shaker Women's Wellness         |   5.0 |
| Beachwood | Avis Rent A Car                 |   2.5 |
| Beachwood | Cleveland Acupuncture           |   5.0 |
| Beachwood | Studio Mz                       |   5.0 |
+-----------+---------------------------------+-------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

-Code:
	--StartofCode
	Select name
	,review_count
	from user
	ORDER BY review_count DESC --DESC clase for displaying the counts from top to bottom
	LIMIT 3;  --Used the limit clause to list only top 3 records
	--EndofCode
	
		
	Copy and Paste the Result Below:

	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

-Code
	--StartofCode
	Select name
	,review_count
	,fans
	from user
	ORDER BY fans DESC
	--EndofCode

	Please explain your findings and interpretation of the results:

	--Output Findings:

		+-----------+--------------+------+
		| name      | review_count | fans |
		+-----------+--------------+------+
		| Amy       |          609 |  503 |
		| Mimi      |          968 |  497 |
		| Harald    |         1153 |  311 |
		| Gerald    |         2000 |  253 |
		| Christine |          930 |  173 |
		| Lisa      |          813 |  159 |
		| Cat       |          377 |  133 |
		| William   |         1215 |  126 |
		| Fran      |          862 |  124 |
		| Lissa     |          834 |  120 |
		| Mark      |          861 |  115 |
		| Tiffany   |          408 |  111 |
		| bernice   |          255 |  105 |
		| Roanna    |         1039 |  104 |
		| Angela    |          694 |  101 |
		| .Hon      |         1246 |  101 |
		| Ben       |          307 |   96 |
		| Linda     |          584 |   89 |
		| Christina |          842 |   85 |
		| Jessica   |          220 |   84 |
		| Greg      |          408 |   81 |
		| Nieves    |          178 |   80 |
		| Sui       |          754 |   78 |
		| Yuri      |         1339 |   76 |
		| Nicole    |          161 |   73 |
		+-----------+--------------+------+
		(Output limit exceeded, 25 of 10000 total rows shown)
	
	Interpretation: As from the output shown above, having more fan doesn't always mean that it will have more reviews, there are results where the reviews are more but yet the fans are less and vice-versa. Hence, they don't coorelate to eachother. 

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love" i.e. a total number of 1780 reviews whereas with the word "hate" there are only 232 reviews.

	
	SQL code used to arrive at answer:

	-Code for "LOVE":

	--StartofCode
	Select count(stars)
	from review
	Where text LIKE '%love%' 
	--EndofCode

	-Output for "Love":

	+--------------+
	| count(stars) |
	+--------------+
	|         1780 |
	+--------------+

	-Code for "Hate"
	--StartofCode
	Select count(stars)
	from review
	Where text LIKE '%hate%' 
	--EndofCode
	
	-Output for "Hate":

	+--------------+
	| count(stars) |
	+--------------+
	|          232 |
	+--------------+


10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	-Code:

	--StartofCode
	Select name
	,fans
	from user
	ORDER BY fans DESC
	LIMIT 10; --Limiting by only top 10 users
	--EndofCode
	
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
